# Docker Compose pentru PRODUCȚIE - Platformă de Vânzări
# Configurație optimizată pentru deployment în cloud

version: '3.8'

services:
  # Backend API - Optimizat pentru producție
  api:
    build:
      context: ./backend-api
      dockerfile: Dockerfile
      target: production  # Multi-stage build
    container_name: sales-api-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - EMAIL_SERVICE=${EMAIL_SERVICE}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - sales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database - Configurație de producție
  postgres:
    image: postgres:15-alpine
    container_name: sales-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sales_platform}
      POSTGRES_USER: ${POSTGRES_USER:-sales_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/backups:/backups
    networks:
      - sales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sales_user} -d ${POSTGRES_DB:-sales_platform}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache - Configurație de producție
  redis:
    image: redis:7-alpine
    container_name: sales-redis-prod
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - sales-network
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Nginx Reverse Proxy - Producție cu SSL
  nginx:
    image: nginx:alpine
    container_name: sales-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./frontend-web/build:/usr/share/nginx/html:ro
      - ./ssl:/etc/ssl/certs:ro  # Pentru certificatele SSL
    depends_on:
      - api
    networks:
      - sales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Volume-uri persistente pentru producție
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/sales_postgres_data
  redis_data:
    driver: local

# Rețea izolată pentru servicii
networks:
  sales-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
